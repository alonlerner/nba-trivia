[{"C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\index.js":"1","C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\reportWebVitals.js":"2","C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\App.js":"3","C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\Game.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":162,"mtime":1608575511260,"results":"8","hashOfConfig":"6"},{"size":49907,"mtime":1637016378118,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1p78c1r",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\index.js",[],["20","21"],"C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\reportWebVitals.js",[],"C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\App.js",[],"C:\\Users\\Alon\\Documents\\Projects\\nba-trivia\\src\\Game.js",["22","23","24","25"],"import React from \"react\"\r\nimport heart2 from \"./heart2.png\"\r\nimport nba from \"./nba3.png\"\r\n\r\nclass Game extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            lives: 3,\r\n            questionNum: 1,\r\n            totalScore: 0,\r\n            question: {\"question\": \"loading...\", \"questionImg\":\"\", \"correctAnswer\": \"loading...\", \"correctAnswerData\":0, \"wrongAnswer1\": \"loading...\", \"wrongAnswer1Data\":0, \"wrongAnswer2\": \"loading...\", \"wrongAnswer2Data\":0, \"wrongAnswer3\": \"loading...\", \"wrongAnswer3Data\":0 },\r\n            currentQuestionId: 0,\r\n            notClicked: true,\r\n            randomAnswers: [],\r\n            time: 100,\r\n            gameOver: false,\r\n            gameStarted: false,\r\n            name: '',\r\n            leaderboard: [{ \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }],\r\n            teamCode: [\"Atlanta Hawks\", \"Boston Celtics\", \"New Orleans Pelicans\", \"Chicago Bulls\", \"Cleveland Cavaliers\", \"Dallas Mavericks\", \"Denver Nuggets\", \"Detroit Pistons\", \"Golden State Warriors\", \"Houston Rockets\", \"Indiana Pacers\", \"Los Angeles Clippers\", \"Los Angeles Lakers\", \"Miami Heat\", \"Milwaukee Bucks\", \"Minnesota Timberwolves\", \"Brooklyn Nets\", \"New York Knicks\", \"Orlando  Magic\", \"Philadelphia 76ers\", \"Phoenix Suns\", \"Portland Trail Blazers\", \"Sacramento Kings\", \"San Antonio Spurs\", \"Oklahoma City Thunder\", \"Utah Jazz\", \"Washington Wizards\", \"Toronto Raptors\", \"Memphis Grizzlies\", \"Charlotte Hornets\"],\r\n            statsCode: [\"points per game\", \"rebounds per game\", \"assists per game\"],\r\n            data: [{ \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }, { \"fullName\": \"loading...\" }],\r\n            loadedQuestion:[],\r\n            loadedRandomAnswers: [],\r\n            pastQuestions: [],\r\n            topPlayers: [],\r\n            teams:[],\r\n            Ready: false,\r\n            pastPlayerPhotoQuestion: [],\r\n            StatsQuestions: [],\r\n            pictureQuestions: [],\r\n            collegeQuestions: [],\r\n            recordQuestions: [],\r\n            questions: [{ \"question\": \"loading...\", \"questionImg\": \"\", \"correctAnswer\": \"loading...\", \"correctAnswerData\": 0, \"wrongAnswer1\": \"loading...\", \"wrongAnswer1Data\": 0, \"wrongAnswer2\": \"loading...\", \"wrongAnswer2Data\": 0, \"wrongAnswer3\": \"loading...\", \"wrongAnswer3Data\": 0 }]\r\n        }\r\n        this.getQuestions = this.getQuestions.bind(this)\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleStart = this.handleStart.bind(this)\r\n        this.handleNameChange = this.handleNameChange.bind(this)\r\n        this.handleEndGame = this.handleEndGame.bind(this)\r\n        this.handleNewGame = this.handleNewGame.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTeams()\r\n        this.getTopPlayers()\r\n        this.getStatsQuestions()\r\n\r\n\r\n    }\r\n\r\n    getQuestions() {\r\n        var tempA = this.state.StatsQuestions.concat(this.state.pictureQuestions.concat(this.state.collegeQuestions.concat(this.state.recordQuestions)))\r\n        this.setState({ questions: tempA })\r\n        setTimeout(() => {\r\n            const a = this.state.questions\r\n            var ctr = a.length, temp, index\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = a[ctr]\r\n                a[ctr] = a[index]\r\n                a[index] = temp\r\n            }\r\n            this.setState({ questions: a })\r\n            const array = [this.state.questions[this.state.currentQuestionId].correctAnswer, this.state.questions[this.state.currentQuestionId].wrongAnswer1, this.state.questions[this.state.currentQuestionId].wrongAnswer2, this.state.questions[this.state.currentQuestionId].wrongAnswer3]\r\n            ctr = array.length\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = array[ctr]\r\n                array[ctr] = array[index]\r\n                array[index] = temp\r\n            }\r\n            this.setState({ randomAnswers: array })\r\n            this.setState({ Ready: true })\r\n        },1000)\r\n    }\r\n\r\n    getTeams() {\r\n        var a = [], i\r\n        for (i = 1; i < 31; i++) {\r\n            fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + i)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    a.push(response)\r\n                })            \r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ teams: a })\r\n            setTimeout(() => {\r\n                this.getRecordQuestions()\r\n            },1000)\r\n        },5000)\r\n    }\r\n\r\n    getRecordQuestionsHelp(t, n, a) {\r\n        var i, j\r\n        for (i = n; i < n + 3; i++) {\r\n            for (j = n; j < n + 3 ; j++) {\r\n                if (a[j].team.record.items[t].stats[3].value >= a[j + 1].team.record.items[t].stats[3].value) {\r\n                    var temp = a[j];\r\n                    a[j] = a[j + 1];\r\n                    a[j + 1] = temp;\r\n                }\r\n            }\r\n        }\r\n        return { \"question\": \"What team has a better \" + a[n].team.record.items[t].description.toLowerCase() + \"?\", \"questionImg\": nba, \"correctAnswer\": a[n + 3].team.displayName, \"wrongAnswer1\": a[n + 2].team.displayName, \"wrongAnswer2\": a[n + 1].team.displayName, \"wrongAnswer3\": a[n].team.displayName }\r\n\r\n    }\r\n\r\n    getRecordQuestions() {\r\n        var a = this.state.teams, i, j, aq=[]\r\n        for (i = 0; i < 3; i++) {\r\n            var ctr = a.length, temp, index\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = a[ctr]\r\n                a[ctr] = a[index]\r\n                a[index] = temp\r\n            }\r\n            for (j = 0; j < a.length-4; j = j + 4) {\r\n                aq.push(this.getRecordQuestionsHelp(i,j,a))\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ recordQuestions: aq })\r\n        },1000)\r\n        \r\n    }\r\n\r\n    getStatsQuestionsHelp(n) {\r\n        var a = [], j\r\n        fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + n)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                a.push(response.team.logos[0].href)\r\n            })\r\n        fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + n + '/roster')\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                for (j = 0; j < result.athletes.length; j++) {\r\n                    if (result.athletes[j].experience.years !== 0) {\r\n                        fetch('https://site.web.api.espn.com/apis/common/v3/sports/basketball/nba/athletes/' + result.athletes[j].id)\r\n                            .then(response => response.json())\r\n                            .then(response => {\r\n                                a.push(response)\r\n\r\n                            })\r\n                    }\r\n                }\r\n            })\r\n        return a\r\n    }\r\n\r\n    getStatsQuestionsHelp2(a, j, i) {\r\n        var k, leader1 = { \"name\": \"\", \"data\": 0 }, leader2 = { \"name\": \"\", \"data\": 0 }, leader3 = { \"name\": \"\", \"data\": 0 }, leader4 = { \"name\": \"\", \"data\": 0 }\r\n        for (k = 1; k < a.length; k++) {\r\n            if (a[k].athlete.statsSummary.displayName === \"2021-22 season stats\") {\r\n                if (a[k].athlete.statsSummary.statistics[j].value >= leader1.data) {\r\n                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                    leader3 = { \"name\": leader2.name, \"data\": leader2.data }\r\n                    leader2 = { \"name\": leader1.name, \"data\": leader1.data }\r\n                    leader1 = { \"name\": a[k].athlete.displayName, \"data\": a[k].athlete.statsSummary.statistics[j].value }\r\n                }\r\n                else if (a[k].athlete.statsSummary.statistics[j].value >= leader2.data) {\r\n                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                    leader3 = { \"name\": leader2.name, \"data\": leader2.data }\r\n                    leader2 = { \"name\": a[k].athlete.displayName, \"data\": a[k].athlete.statsSummary.statistics[j].value }\r\n                }\r\n                else if (a[k].athlete.statsSummary.statistics[j].value >= leader3.data) {\r\n                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                    leader3 = { \"name\": a[k].athlete.displayName, \"data\": a[k].athlete.statsSummary.statistics[j].value }\r\n                }\r\n                else if (a[k].athlete.statsSummary.statistics[j].value >= leader4.data) {\r\n                    leader4 = { \"name\": a[k].athlete.displayName, \"data\": a[k].athlete.statsSummary.statistics[j].value }\r\n                }\r\n            }\r\n\r\n        }\r\n        return { \"question\": \"Who leads \" + this.state.teamCode[i] + \" in \" + this.state.statsCode[j] + \"?\", \"questionImg\": a[0], \"correctAnswer\": leader1.name, \"wrongAnswer1\": leader2.name, \"wrongAnswer2\": leader3.name, \"wrongAnswer3\": leader4.name }\r\n    }\r\n\r\n    getStatsQuestions() {\r\n        var i, j, a = [],a2=[]\r\n        for (i = 1; i < 31; i++) {\r\n\r\n            a.push(this.getStatsQuestionsHelp(i))\r\n        }\r\n        setTimeout(() => {\r\n            for (i = 0; i < a.length; i++) {\r\n                for (j = 0; j < 3; j++) {\r\n                    a2.push(this.getStatsQuestionsHelp2(a[i],j,i))\r\n                }\r\n            }\r\n            this.setState({ StatsQuestions: a2 })\r\n        }, 11000)\r\n\r\n    }\r\n\r\n    getTopPlayers() {\r\n        var i, j, a = []\r\n        for (i = 1; i < 31; i++) {\r\n            fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + i + '/roster')\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    for (j = 0; j < result.athletes.length; j++) {\r\n                        if (result.athletes[j].experience.years !== 0) {\r\n                            fetch('https://site.web.api.espn.com/apis/common/v3/sports/basketball/nba/athletes/' + result.athletes[j].id)\r\n                                .then(response => response.json())\r\n                                .then(response => {\r\n                                    if (response.athlete.statsSummary.statistics[0].value >= 15 || response.athlete.statsSummary.statistics[1].value >= 10 || response.athlete.statsSummary.statistics[2].value >= 6)\r\n                                        a.push(response)\r\n\r\n                                })\r\n                        }\r\n                    }\r\n                })\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ topPlayers: a })\r\n            setTimeout(() => {\r\n                this.getPictureQuestions()\r\n                this.getCollegeQuestion()\r\n            },1000)\r\n        }, 5000)\r\n    }\r\n\r\n    getPictureQuestions() {\r\n        var a = [], i\r\n        for (i = 0 ; i < this.state.topPlayers.length; i++) {\r\n            do {\r\n                var wrong1 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong1 === i)\r\n            do {\r\n                var wrong2 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong2 === i || wrong2 === wrong1)\r\n            do {\r\n                var wrong3 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong3 === i || wrong3 === wrong1 || wrong3 === wrong2)\r\n            a.push({ \"question\": \"Name the player.\", \"questionImg\": this.state.topPlayers[i].athlete.headshot.href, \"correctAnswer\": this.state.topPlayers[i].athlete.displayName, \"wrongAnswer1\": this.state.topPlayers[wrong1].athlete.displayName, \"wrongAnswer2\": this.state.topPlayers[wrong2].athlete.displayName, \"wrongAnswer3\": this.state.topPlayers[wrong3].athlete.displayName })\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ pictureQuestions: a })\r\n        },5000)\r\n    }\r\n\r\n    getCollegeQuestion() {\r\n        var a = [], i\r\n        for (i = 0; i < this.state.topPlayers.length; i++) {\r\n            if (this.state.topPlayers[i].athlete.hasOwnProperty('collegeTeam') && (this.state.topPlayers[i].athlete.statsSummary.statistics[0].rank <= 30 || this.state.topPlayers[i].athlete.statsSummary.statistics[1].rank <= 10 || this.state.topPlayers[i].athlete.statsSummary.statistics[2].rank <= 10)) {\r\n                do {\r\n                    var wrong1 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n                } while (!this.state.topPlayers[wrong1].athlete.hasOwnProperty('collegeTeam') || this.state.topPlayers[wrong1].athlete.collegeTeam.displayName === this.state.topPlayers[i].athlete.collegeTeam.displayName)\r\n                do {\r\n                    var wrong2 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n                } while (!this.state.topPlayers[wrong2].athlete.hasOwnProperty('collegeTeam') || this.state.topPlayers[wrong2].athlete.collegeTeam.displayName === this.state.topPlayers[i].athlete.collegeTeam.displayName || this.state.topPlayers[wrong2].athlete.collegeTeam.displayName === this.state.topPlayers[wrong1].athlete.collegeTeam.displayName)\r\n                do {\r\n                    var wrong3 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n                } while (!this.state.topPlayers[wrong3].athlete.hasOwnProperty('collegeTeam') || this.state.topPlayers[wrong3].athlete.collegeTeam.displayName === this.state.topPlayers[i].athlete.collegeTeam.displayName || this.state.topPlayers[wrong3].athlete.collegeTeam.displayName === this.state.topPlayers[wrong1].athlete.collegeTeam.displayName || this.state.topPlayers[wrong3].athlete.collegeTeam.displayName === this.state.topPlayers[wrong2].athlete.collegeTeam.displayName)\r\n                a.push({ \"question\": \"Where \" + this.state.topPlayers[i].athlete.fullName+\" played in college?\", \"questionImg\": this.state.topPlayers[i].athlete.headshot.href, \"correctAnswer\": this.state.topPlayers[i].athlete.collegeTeam.displayName, \"wrongAnswer1\": this.state.topPlayers[wrong1].athlete.collegeTeam.displayName, \"wrongAnswer2\": this.state.topPlayers[wrong2].athlete.collegeTeam.displayName, \"wrongAnswer3\": this.state.topPlayers[wrong3].athlete.collegeTeam.displayName })\r\n            }\r\n            \r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ collegeQuestions: a })\r\n            setTimeout(() => {\r\n                this.getQuestions()\r\n            }, 1000)\r\n        }, 5000)\r\n    }\r\n\r\n    getQuestion = () => {\r\n        if (1 === 1) {\r\n            do {\r\n                var player = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (this.state.pastPlayerPhotoQuestion.includes(player))\r\n            do {\r\n                var wrong1 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong1 === player)\r\n            do {\r\n                var wrong2 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong2 === player || wrong2 === wrong1)\r\n            do {\r\n                var wrong3 = Math.floor(Math.random() * this.state.topPlayers.length)\r\n            } while (wrong3 === player || wrong3 === wrong1 || wrong3 === wrong2)\r\n            this.setState({\r\n                question: { \"question\": \"Name the player.\", \"questionImg\": this.state.topPlayers[player].athlete.headshot.href, \"correctAnswer\": this.state.topPlayers[player].athlete.displayName, \"wrongAnswer1\": this.state.topPlayers[wrong1].athlete.displayName, \"wrongAnswer2\": this.state.topPlayers[wrong2].athlete.displayName, \"wrongAnswer3\": this.state.topPlayers[wrong3].athlete.displayName }\r\n            })\r\n            const array = [this.state.question.correctAnswer, this.state.question.wrongAnswer1, this.state.question.wrongAnswer2, this.state.question.wrongAnswer3]\r\n            let ctr = array.length, temp, index\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = array[ctr]\r\n                array[ctr] = array[index]\r\n                array[index] = temp\r\n            }\r\n            this.setState({ randomAnswers: array })\r\n            this.setState({ time: 100 })\r\n            this.setState({ notClicked: true })\r\n            var tempA = this.state.pastPlayerPhotoQuestion.concat(player)\r\n            this.setState({ pastPlayerPhotoQuestion: tempA })\r\n        }\r\n\r\n        else {\r\n            let randomTeam = Math.floor(Math.random() * 30) + 1;\r\n            let randomStats = Math.floor(Math.random() * 3);\r\n            var newQuestion = true, i\r\n            do {\r\n                newQuestion = true\r\n                for (i = 0; i < this.state.pastQuestions.length; i++) {\r\n                    if (this.state.pastQuestions[i].team === randomTeam && this.state.pastQuestions[i].stat === randomStats) {\r\n                        randomTeam = Math.floor(Math.random() * 30) + 1\r\n                        randomStats = Math.floor(Math.random() * 3);\r\n                        newQuestion = false\r\n                        break\r\n                    }\r\n                }\r\n            } while (!newQuestion)\r\n            var imgUrl\r\n            fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + randomTeam)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    imgUrl = response.team.logos[0].href\r\n                })\r\n\r\n\r\n            var leader1 = { \"name\": \"\", \"data\": 0 }, leader2 = { \"name\": \"\", \"data\": 0 }, leader3 = { \"name\": \"\", \"data\": 0 }, leader4 = { \"name\": \"\", \"data\": 0 }, a = []\r\n            fetch('https://site.api.espn.com/apis/site/v2/sports/basketball/nba/teams/' + randomTeam + '/roster')\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    this.setState({ data: result.athletes })\r\n                    for (i = 0; i < result.athletes.length; i++) {\r\n                        if (result.athletes[i].experience.years !== 0) {\r\n                            fetch('https://site.web.api.espn.com/apis/common/v3/sports/basketball/nba/athletes/' + result.athletes[i].id)\r\n                                .then(response => response.json())\r\n                                .then(response => {\r\n                                    a.push(response)\r\n\r\n                                })\r\n                        }\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    this.setState({ data: a })\r\n                    setTimeout(() => {\r\n                        for (i = 0; i < a.length; i++) {\r\n                            if (a[i].athlete.statsSummary.displayName === \"2020-21 season stats\") {\r\n                                if (a[i].athlete.statsSummary.statistics[randomStats].value >= leader1.data) {\r\n\r\n                                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                                    leader3 = { \"name\": leader2.name, \"data\": leader2.data }\r\n                                    leader2 = { \"name\": leader1.name, \"data\": leader1.data }\r\n                                    leader1 = { \"name\": a[i].athlete.displayName, \"data\": a[i].athlete.statsSummary.statistics[randomStats].value }\r\n                                }\r\n                                else if (a[i].athlete.statsSummary.statistics[randomStats].value >= leader2.data) {\r\n                                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                                    leader3 = { \"name\": leader2.name, \"data\": leader2.data }\r\n                                    leader2 = { \"name\": a[i].athlete.displayName, \"data\": a[i].athlete.statsSummary.statistics[randomStats].value }\r\n                                }\r\n                                else if (a[i].athlete.statsSummary.statistics[randomStats].value >= leader3.data) {\r\n                                    leader4 = { \"name\": leader3.name, \"data\": leader3.data }\r\n                                    leader3 = { \"name\": a[i].athlete.displayName, \"data\": a[i].athlete.statsSummary.statistics[randomStats].value }\r\n                                }\r\n                                else if (a[i].athlete.statsSummary.statistics[randomStats].value >= leader4.data) {\r\n                                    leader4 = { \"name\": a[i].athlete.displayName, \"data\": a[i].athlete.statsSummary.statistics[randomStats].value }\r\n                                }\r\n                            }\r\n                        }\r\n                        this.setState({\r\n                            question: { \"question\": \"Who leads \" + this.state.teamCode[randomTeam - 1] + \" in \" + this.state.statsCode[randomStats] + \"?\", \"questionImg\": imgUrl, \"correctAnswer\": leader1.name, \"wrongAnswer1\": leader2.name, \"wrongAnswer2\": leader3.name, \"wrongAnswer3\": leader4.name }\r\n                        })\r\n                        const array = [this.state.question.correctAnswer, this.state.question.wrongAnswer1, this.state.question.wrongAnswer2, this.state.question.wrongAnswer3]\r\n                        let ctr = array.length, temp, index\r\n                        while (ctr > 0) {\r\n                            index = Math.floor(Math.random() * ctr)\r\n                            ctr--\r\n                            temp = array[ctr]\r\n                            array[ctr] = array[index]\r\n                            array[index] = temp\r\n                        }\r\n                        this.setState({ randomAnswers: array })\r\n                        this.setState({ time: 100 })\r\n                        this.setState({ notClicked: true })\r\n                        var tempA = this.state.pastQuestions.concat({ \"team\": randomTeam, \"stat\": randomStats })\r\n                        this.setState({ pastQuestions: tempA })\r\n                    }, 1000)\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    handleNameChange(event) {\r\n        this.setState({ name: event.target.value })\r\n    }\r\n\r\n    enterPressed(event) {\r\n        var code = event.keyCode || event.which\r\n        if (code === 13)\r\n            this.handleStart()\r\n    }\r\n\r\n    handleStart() {\r\n        if (this.state.name.length > 0 && this.state.Ready) {\r\n            this.setState({ gameStarted: true })\r\n            this.setState({ time: 100 })\r\n            clearInterval(this.myInterval)\r\n            this.myInterval = setInterval(() => {\r\n                if (this.state.time > -10) {\r\n                    this.setState(({ time }) => ({ time: time - 1 }))\r\n                }\r\n                if (this.state.time === 0) {\r\n                    this.handleTimesUp()\r\n                }\r\n            }, 200)\r\n        }\r\n    }\r\n\r\n    handleClick(event) {\r\n        clearInterval(this.myInterval)\r\n        if (event.target.textContent.trim() === this.state.questions[this.state.currentQuestionId].correctAnswer.trim()) {\r\n            event.target.style.backgroundColor = '#79ff4d'\r\n            this.setState(({ totalScore }) => ({ totalScore: totalScore + this.state.time }))\r\n        }\r\n\r\n        else {\r\n            event.target.style.backgroundColor = '#ff4000'\r\n            this.setState((prevState) => {\r\n                return { lives: prevState.lives - 1 }\r\n            })\r\n        }\r\n        this.setState({ notClicked: false })\r\n        \r\n        setTimeout(() => {\r\n\r\n            if (this.state.lives === 0 || this.state.questionNum === this.state.questions.length) {\r\n                this.handleEndGame()\r\n            }\r\n            else {\r\n                this.nextQuestion()\r\n            }\r\n        }, 2000)\r\n\r\n\r\n    }\r\n\r\n    handleTimesUp() {\r\n        clearInterval(this.myInterval)\r\n        this.setState(({ lives }) => ({ lives: lives - 1 }))\r\n        setTimeout(() => {\r\n            if (this.state.lives === 0 || this.state.questionNum === this.state.questions.length) {\r\n                this.handleEndGame()\r\n            }\r\n            else {\r\n                this.nextQuestion()\r\n            }\r\n        }, 2000)\r\n    }\r\n\r\n    nextQuestion() {\r\n        this.setState({ notClicked: true })\r\n        this.setState(({ questionNum }) => ({ questionNum: questionNum + 1 }))\r\n        this.setState(({ currentQuestionId }) => ({ currentQuestionId: currentQuestionId + 1 }))\r\n        const array = [this.state.questions[this.state.currentQuestionId].correctAnswer, this.state.questions[this.state.currentQuestionId].wrongAnswer1, this.state.questions[this.state.currentQuestionId].wrongAnswer2, this.state.questions[this.state.currentQuestionId].wrongAnswer3]\r\n        let ctr = array.length, temp, index\r\n        while (ctr > 0) {\r\n            index = Math.floor(Math.random() * ctr)\r\n            ctr--\r\n            temp = array[ctr]\r\n            array[ctr] = array[index]\r\n            array[index] = temp\r\n        }\r\n        this.setState({ randomAnswers: array })\r\n        this.setState({ time: 100 })\r\n        this.myInterval = setInterval(() => {\r\n            if (this.state.time > -10) {\r\n                this.setState(({ time }) => ({ time: time - 1 }))\r\n            }\r\n            if (this.state.time === -10) {\r\n                this.handleTimesUp()\r\n            }\r\n            }, 200)\r\n    }\r\n\r\n    handleEndGame() {\r\n        this.setState({ gameOver: true})\r\n        fetch('https://tlmy7kec05.execute-api.us-east-2.amazonaws.com/Prod/nbaleaderboard')\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                if (response.length > 9 && response[9].score > this.state.totalScore)\r\n                    this.setState({ leaderboard: response })\r\n                else {\r\n                    fetch(`https://tlmy7kec05.execute-api.us-east-2.amazonaws.com/Prod/addnbascore?name=${this.state.name.toUpperCase().trim()}&score=${this.state.totalScore}`)\r\n                    setTimeout(() => {\r\n                        fetch('https://tlmy7kec05.execute-api.us-east-2.amazonaws.com/Prod/nbaleaderboard')\r\n                            .then(response => response.json())\r\n                            .then(response => this.setState({ leaderboard: response }))\r\n                        fetch('https://tlmy7kec05.execute-api.us-east-2.amazonaws.com/Prod/deletenbascore')\r\n                    },1000)\r\n                }\r\n            })\r\n    }\r\n\r\n    \r\n\r\n    handleNewGame() {\r\n        this.setState({\r\n            lives: 3,\r\n            questionNum: 1,\r\n            totalScore: 0,\r\n            currentQuestionId: 0,\r\n            notClicked: true,\r\n            randomAnswers: [],\r\n            time: 100,\r\n            gameOver: false,\r\n            gameStarted: false,\r\n            name: '',\r\n            leaderboard: [{ \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }, { \"name\": \"loading...\", \"score\": \"n/a\" }]\r\n        })\r\n        setTimeout(() => {\r\n            const a = this.state.questions\r\n            var ctr = a.length, temp, index\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = a[ctr]\r\n                a[ctr] = a[index]\r\n                a[index] = temp\r\n            }\r\n            this.setState({ questions: a })\r\n            const array = [this.state.questions[this.state.currentQuestionId].correctAnswer, this.state.questions[this.state.currentQuestionId].wrongAnswer1, this.state.questions[this.state.currentQuestionId].wrongAnswer2, this.state.questions[this.state.currentQuestionId].wrongAnswer3]\r\n            ctr = array.length\r\n            while (ctr > 0) {\r\n                index = Math.floor(Math.random() * ctr)\r\n                ctr--\r\n                temp = array[ctr]\r\n                array[ctr] = array[index]\r\n                array[index] = temp\r\n            }\r\n            this.setState({ randomAnswers: array })\r\n        },1000)\r\n    }\r\n\r\n    displayLives() {\r\n        let i\r\n        for (i = 0; i < this.state.lives; i++) {\r\n            return (<div style={{ display: \"inline-block\" }}><img src={heart2} width=\"40px\" alt=\"error\" /></div>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div style={{ display: this.state.gameStarted ? \"none\" : \"block\", marginTop: \"7vh\" }}>\r\n                    <img src={nba} height=\"88vh\" /><h1 className=\"headline-njit\" >NBA</h1>\r\n                    {/*<h1 className=\"headline-snd\" >Statistics</h1>*/}\r\n                    <h1 className=\"headline\" >Trivia Game</h1>\r\n                    <input className=\"name-input\" type=\"text\" minLength=\"1\" maxLength=\"10\" placeholder=\"Enter your name\" value={this.state.name} onChange={this.handleNameChange} onSubmit={this.handleStart} onKeyPress={this.enterPressed.bind(this)} style={{ width: 200, margin: \"1rem auto\", fontWeight: \"bold\" }} />\r\n                    <div className=\"start-button\" onClick={this.handleStart}>{!this.state.Ready ? \"Loading...\" : \"start!\"}</div>\r\n                </div>\r\n                <div style={{ display: !this.state.gameOver && this.state.gameStarted ? \"block\" : \"none\" }}>\r\n                    <table style={{ display: this.state.questions && this.state.gameStarted ? \"block\" : \"none\" }} className=\"table-bar\" >\r\n                        <tr>\r\n                            <td className=\"td-bar\">{this.state.totalScore}</td>\r\n                            <td className=\"td-bar\">#{this.state.questionNum}</td>\r\n                            <td className=\"td-bar\">{this.state.time > 0 ? (this.state.time / 5 + 0.8 | 0) : \"Time's up!\"}</td>\r\n                            <td className=\"td-bar\">\r\n                                <div>\r\n                                    <div style={{ display: this.state.lives > 0 ? \"inline-block\" : \"none\" }}><img src={heart2} width=\"25rem\" alt=\"error\" /></div>\r\n                                    <div style={{ display: this.state.lives > 1 ? \"inline-block\" : \"none\" }}><img src={heart2} width=\"25rem\" alt=\"error\" /></div>\r\n                                    <div style={{ display: this.state.lives > 2 ? \"inline-block\" : \"none\" }}><img src={heart2} width={window.innerWidth > 900 ? \"25rem\" : \"25rem\"} alt=\"error\" /></div>\r\n                                </div>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                    <br style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\" }} />\r\n                    <div className=\"question\" style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\" }}><img src={this.state.questions && this.state.questions[this.state.currentQuestionId].questionImg} height=\"120vh\" /><br height=\"10vh\" />{this.state.questions && this.state.questions[this.state.currentQuestionId].question}</div>                    <div className=\"div-answer\" onClick={this.state.notClicked && this.state.time > 0 && this.handleClick} style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\", backgroundColor: this.state.time === 100 && '' }}>{this.state.questions && this.state.randomAnswers[0]}</div>\r\n                    <div className=\"div-answer\" onClick={this.state.notClicked && this.state.time > 0 && this.handleClick} style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\", backgroundColor: this.state.time === 100 && '' }}>{this.state.questions && this.state.randomAnswers[1]}</div>\r\n                    <div className=\"div-answer\" onClick={this.state.notClicked && this.state.time > 0 && this.handleClick} style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\", backgroundColor: this.state.time === 100 && '' }}>{this.state.questions && this.state.randomAnswers[2]}</div>\r\n                    <div className=\"div-answer\" onClick={this.state.notClicked && this.state.time > 0 && this.handleClick} style={{ display: this.state.questions && this.state.time > -10 ? \"block\" : \"none\", backgroundColor: this.state.time === 100 && '' }}>{this.state.questions && this.state.randomAnswers[3]}</div>\r\n                </div>\r\n                <div style={{ display: this.state.gameOver && this.state.gameStarted ? \"block\" : \"none\" }}>\r\n                    <h1 className=\"final-score\" style={{ display: this.state.gameOver ? \"block\" : \"none\" }}>Final Score: {this.state.totalScore}</h1>\r\n                    <h1 className=\"leaderboard-headline\">Top 10 leaderboard</h1>\r\n                    <table className=\"leaderboard-table\" style={{ display: this.state.leaderboard ? \"block\" : \"none\", backgroundColor: \"#e6e6e6\", width: \"19rem\", margin: \"1rem auto\", border: \"1px solid black\", borderRadius: 25, padding: \"1rem\" }}>\r\n                        <tr>\r\n                            <td style={{ width: \"2rem\" }}>#</td>\r\n                            <td style={{ width: \"10rem\" }}>name</td>\r\n                            <td style={{ width: \"5rem\" }}>score</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 0 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && this.state.leaderboard[0].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>1</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && this.state.leaderboard[0].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 0 && this.state.leaderboard[0].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 0 && this.state.name.toUpperCase().trim() === this.state.leaderboard[0].name.toUpperCase().trim() && this.state.leaderboard[0].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 0 && this.state.leaderboard[0].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 1 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && this.state.leaderboard[1].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>2</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && this.state.leaderboard[1].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 1 && this.state.leaderboard[1].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 1 && this.state.name.toUpperCase().trim() === this.state.leaderboard[1].name.toUpperCase().trim() && this.state.leaderboard[1].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 1 && this.state.leaderboard[1].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 2 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && this.state.leaderboard[2].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>3</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && this.state.leaderboard[2].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 2 && this.state.leaderboard[2].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 2 && this.state.name.toUpperCase().trim() === this.state.leaderboard[2].name.toUpperCase().trim() && this.state.leaderboard[2].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 2 && this.state.leaderboard[2].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 3 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && this.state.leaderboard[3].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>4</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && this.state.leaderboard[3].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 3 && this.state.leaderboard[3].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 3 && this.state.name.toUpperCase().trim() === this.state.leaderboard[3].name.toUpperCase().trim() && this.state.leaderboard[3].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 3 && this.state.leaderboard[3].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 4 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && this.state.leaderboard[4].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>5</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && this.state.leaderboard[4].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 4 && this.state.leaderboard[4].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 4 && this.state.name.toUpperCase().trim() === this.state.leaderboard[4].name.toUpperCase().trim() && this.state.leaderboard[4].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 4 && this.state.leaderboard[4].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 5 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && this.state.leaderboard[5].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>6</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && this.state.leaderboard[5].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 5 && this.state.leaderboard[5].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 5 && this.state.name.toUpperCase().trim() === this.state.leaderboard[5].name.toUpperCase().trim() && this.state.leaderboard[5].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 5 && this.state.leaderboard[5].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 6 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && this.state.leaderboard[6].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>7</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && this.state.leaderboard[6].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 6 && this.state.leaderboard[6].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 6 && this.state.name.toUpperCase().trim() === this.state.leaderboard[6].name.toUpperCase().trim() && this.state.leaderboard[6].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 6 && this.state.leaderboard[6].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 7 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && this.state.leaderboard[7].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>8</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && this.state.leaderboard[7].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 7 && this.state.leaderboard[7].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 7 && this.state.name.toUpperCase().trim() === this.state.leaderboard[7].name.toUpperCase().trim() && this.state.leaderboard[7].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 7 && this.state.leaderboard[7].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 8 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && this.state.leaderboard[8].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>9</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && this.state.leaderboard[8].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 8 && this.state.leaderboard[8].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 8 && this.state.name.toUpperCase().trim() === this.state.leaderboard[8].name.toUpperCase().trim() && this.state.leaderboard[8].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 8 && this.state.leaderboard[8].score}</td>\r\n                        </tr>\r\n                        <tr style={{ display: this.state.leaderboard.length > 9 ? \"block\" : \"none\" }}>\r\n                            <td style={{ color: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && this.state.leaderboard[9].score === this.state.totalScore && \"bold\", width: \"2rem\" }}>10</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && this.state.leaderboard[9].score === this.state.totalScore && \"bold\", width: \"10rem\" }}>{this.state.leaderboard.length > 9 && this.state.leaderboard[9].name}</td>\r\n                            <td style={{ color: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && \"red\", fontWeight: this.state.leaderboard.length > 9 && this.state.name.toUpperCase().trim() === this.state.leaderboard[9].name.toUpperCase().trim() && this.state.leaderboard[9].score === this.state.totalScore && \"bold\", width: \"5rem\" }}>{this.state.leaderboard.length > 9 && this.state.leaderboard[9].score}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <div className=\"start-button\" onClick={this.handleNewGame}>play agian!</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":208,"column":23,"nodeType":"32","messageId":"33","endLine":220,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":276,"column":13,"nodeType":"36","messageId":"37","endLine":276,"endColumn":20},{"ruleId":"38","severity":1,"message":"39","line":559,"column":21,"nodeType":"40","endLine":559,"endColumn":52},{"ruleId":"38","severity":1,"message":"39","line":581,"column":133,"nodeType":"40","endLine":581,"endColumn":248},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'j', 'j', 'j', 'j', 'j'.","ArrowFunctionExpression","unsafeRefs","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]